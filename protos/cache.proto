syntax = "proto3";

option csharp_namespace = "CalculationService";

package calc;

import public "moniker.proto";


//////////////////////
// DataSource
//////////////////////

service DataSource {
  rpc Get(DataSourceGetRequest) returns (stream DataSourceGetResponse) {}
}

message DataSourceGetRequest {
  MonikerId id = 1;
}

message DataSourceGetResponse {
  oneof Resp {
    StoredValue success   = 1;
    MonikerId   notFound  = 2;
    CacheError  error     = 100;
  }
}

//////////////////////
// Cache
//////////////////////

service CacheControl {
  //rpc Put(stream CachePutRequest) returns (CachePutResponse) {}
  rpc Invalidate(CacheInvalidateRequest) returns (CacheInvalidateResponse) {}
  rpc Clear(CacheClearRequest) returns (CacheClearResponse) {}
}

//message CachePutRequest {
//  StoredValue value                     = 1;
//  google.protobuf.Timestamp retainUntil = 2;
//}

//message CachePutResponse { // TODO: Change to streaming?
//  oneof Resp {
//    StoredValue.Metadata  success = 1;
//    CacheError            error   = 100;
//  }
//}

message CacheInvalidateRequest {
  MonikerId id = 1;
}

message CacheInvalidateResponse {
  oneof Resp {
    google.protobuf.Empty success   = 1;
    MonikerId             notFound  = 2;
    CacheError            error     = 100;
  }
}

message CacheClearRequest {
}

message CacheClearResponse {
  oneof Resp {
    google.protobuf.Empty success   = 1;
    CacheError            error     = 100;
  }
}

message CacheError {
  InternalError error = 1;
}


////////////////////////////////////////////
// Monitoring
////////////////////////////////////////////
service MonitoringService {
  //rpc GetReplicaId(Empty) returns (GetReplicaIdResponse) {}

  rpc GetStatus(MonitoringUpdateRequest) returns (MonitoringUpdateResponse) {}
  rpc Subscribe(MonitoringUpdateRequest) returns (stream MonitoringUpdateResponse) {}
}

message MonitoringUpdateRequest {
  string correlationId = 1;
}

message MonitoringUpdateResponse {
  ReplicaStatus status = 1;
}

message ReplicaStatus {
  string replicaId                      = 1;
  ReplicaConnectionInfo connectionInfo  = 2;
  google.protobuf.Timestamp started     = 3;
//  ReplicaConfig replicaConfig           = 4;
  google.protobuf.Timestamp currentClock = 5;

  ReplicaCounters counters              = 10;
  CollectedStats collectedStats         = 11;
  ClusterStatus clusterStatus           = 12;
}

message ClusterStatus {
  map<string, ReplicaConnectionInfo> replicas = 1;
}

message ReplicaConnectionInfo {
  string host = 1;
  uint32 port = 2;
  // Some other metadata?
}

message ReplicaCounters {
  uint64 addsCounter            = 1;
  uint64 deletesCounter         = 2;
  uint64 copysCounter           = 3;
  uint64 getCounter             = 4;
  uint64 containsCounter        = 5;
  uint64 keySearchCounter       = 6;
  uint64 metadataSearchCounter  = 7;
  uint64 pageSearchCounter      = 8;

  uint32 largestKeySize    = 10;
  uint32 largestValueSize  = 11;

  uint64 replicatedAdds    = 15;
  uint64 replicatedDeletes = 16;
}

message CollectedStats {
  uint64 nonExpiredKeys = 10;
  uint64 allKeys        = 11;
  uint64 activeKeys     = 12;
  uint64 deletedKeys    = 13;
  uint64 expiredKeys    = 14;
}



////////////////////////////////////////////
// Model Parameters
////////////////////////////////////////////
