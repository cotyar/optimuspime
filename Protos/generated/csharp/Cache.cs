// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cache.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CalculationService {

  /// <summary>Holder for reflection information generated from cache.proto</summary>
  public static partial class CacheReflection {

    #region Descriptor
    /// <summary>File descriptor for cache.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CacheReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtjYWNoZS5wcm90bxIEY2FsYxoNbW9uaWtlci5wcm90byIzChREYXRhU291",
            "cmNlR2V0UmVxdWVzdBIbCgJpZBgBIAEoCzIPLmNhbGMuTW9uaWtlcklkIo0B",
            "ChVEYXRhU291cmNlR2V0UmVzcG9uc2USJAoHc3VjY2VzcxgBIAEoCzIRLmNh",
            "bGMuU3RvcmVkVmFsdWVIABIjCghub3RGb3VuZBgCIAEoCzIPLmNhbGMuTW9u",
            "aWtlcklkSAASIQoFZXJyb3IYZCABKAsyEC5jYWxjLkNhY2hlRXJyb3JIAEIG",
            "CgRSZXNwImQKD0NhY2hlUHV0UmVxdWVzdBIgCgV2YWx1ZRgBIAEoCzIRLmNh",
            "bGMuU3RvcmVkVmFsdWUSLwoLcmV0YWluVW50aWwYAiABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wImwKEENhY2hlUHV0UmVzcG9uc2USLQoHc3Vj",
            "Y2VzcxgBIAEoCzIaLmNhbGMuU3RvcmVkVmFsdWUuTWV0YWRhdGFIABIhCgVl",
            "cnJvchhkIAEoCzIQLmNhbGMuQ2FjaGVFcnJvckgAQgYKBFJlc3AiMQoSQ2Fj",
            "aGVSZW1vdmVSZXF1ZXN0EhsKAmlkGAEgASgLMg8uY2FsYy5Nb25pa2VySWQi",
            "kAEKE0NhY2hlUmVtb3ZlUmVzcG9uc2USKQoHc3VjY2VzcxgBIAEoCzIWLmdv",
            "b2dsZS5wcm90b2J1Zi5FbXB0eUgAEiMKCG5vdEZvdW5kGAIgASgLMg8uY2Fs",
            "Yy5Nb25pa2VySWRIABIhCgVlcnJvchhkIAEoCzIQLmNhbGMuQ2FjaGVFcnJv",
            "ckgAQgYKBFJlc3AiEwoRQ2FjaGVDbGVhclJlcXVlc3QiagoSQ2FjaGVDbGVh",
            "clJlc3BvbnNlEikKB3N1Y2Nlc3MYASABKAsyFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHlIABIhCgVlcnJvchhkIAEoCzIQLmNhbGMuQ2FjaGVFcnJvckgAQgYK",
            "BFJlc3AiMAoKQ2FjaGVFcnJvchIiCgVlcnJvchgBIAEoCzITLmNhbGMuSW50",
            "ZXJuYWxFcnJvciIwChdNb25pdG9yaW5nVXBkYXRlUmVxdWVzdBIVCg1jb3Jy",
            "ZWxhdGlvbklkGAEgASgJIj8KGE1vbml0b3JpbmdVcGRhdGVSZXNwb25zZRIj",
            "CgZzdGF0dXMYASABKAsyEy5jYWxjLlJlcGxpY2FTdGF0dXMiuQIKDVJlcGxp",
            "Y2FTdGF0dXMSEQoJcmVwbGljYUlkGAEgASgJEjMKDmNvbm5lY3Rpb25JbmZv",
            "GAIgASgLMhsuY2FsYy5SZXBsaWNhQ29ubmVjdGlvbkluZm8SKwoHc3RhcnRl",
            "ZBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASMAoMY3VycmVu",
            "dENsb2NrGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBInCghj",
            "b3VudGVycxgKIAEoCzIVLmNhbGMuUmVwbGljYUNvdW50ZXJzEiwKDmNvbGxl",
            "Y3RlZFN0YXRzGAsgASgLMhQuY2FsYy5Db2xsZWN0ZWRTdGF0cxIqCg1jbHVz",
            "dGVyU3RhdHVzGAwgASgLMhMuY2FsYy5DbHVzdGVyU3RhdHVzIpIBCg1DbHVz",
            "dGVyU3RhdHVzEjMKCHJlcGxpY2FzGAEgAygLMiEuY2FsYy5DbHVzdGVyU3Rh",
            "dHVzLlJlcGxpY2FzRW50cnkaTAoNUmVwbGljYXNFbnRyeRILCgNrZXkYASAB",
            "KAkSKgoFdmFsdWUYAiABKAsyGy5jYWxjLlJlcGxpY2FDb25uZWN0aW9uSW5m",
            "bzoCOAEiMwoVUmVwbGljYUNvbm5lY3Rpb25JbmZvEgwKBGhvc3QYASABKAkS",
            "DAoEcG9ydBgCIAEoDSK6AgoPUmVwbGljYUNvdW50ZXJzEhMKC2FkZHNDb3Vu",
            "dGVyGAEgASgEEhYKDmRlbGV0ZXNDb3VudGVyGAIgASgEEhQKDGNvcHlzQ291",
            "bnRlchgDIAEoBBISCgpnZXRDb3VudGVyGAQgASgEEhcKD2NvbnRhaW5zQ291",
            "bnRlchgFIAEoBBIYChBrZXlTZWFyY2hDb3VudGVyGAYgASgEEh0KFW1ldGFk",
            "YXRhU2VhcmNoQ291bnRlchgHIAEoBBIZChFwYWdlU2VhcmNoQ291bnRlchgI",
            "IAEoBBIWCg5sYXJnZXN0S2V5U2l6ZRgKIAEoDRIYChBsYXJnZXN0VmFsdWVT",
            "aXplGAsgASgNEhYKDnJlcGxpY2F0ZWRBZGRzGA8gASgEEhkKEXJlcGxpY2F0",
            "ZWREZWxldGVzGBAgASgEIncKDkNvbGxlY3RlZFN0YXRzEhYKDm5vbkV4cGly",
            "ZWRLZXlzGAogASgEEg8KB2FsbEtleXMYCyABKAQSEgoKYWN0aXZlS2V5cxgM",
            "IAEoBBITCgtkZWxldGVkS2V5cxgNIAEoBBITCgtleHBpcmVkS2V5cxgOIAEo",
            "BDJQCgpEYXRhU291cmNlEkIKA0dldBIaLmNhbGMuRGF0YVNvdXJjZUdldFJl",
            "cXVlc3QaGy5jYWxjLkRhdGFTb3VyY2VHZXRSZXNwb25zZSIAMAEyxwEKDENh",
            "Y2hlQ29udHJvbBI4CgNQdXQSFS5jYWxjLkNhY2hlUHV0UmVxdWVzdBoWLmNh",
            "bGMuQ2FjaGVQdXRSZXNwb25zZSIAKAESPwoGUmVtb3ZlEhguY2FsYy5DYWNo",
            "ZVJlbW92ZVJlcXVlc3QaGS5jYWxjLkNhY2hlUmVtb3ZlUmVzcG9uc2UiABI8",
            "CgVDbGVhchIXLmNhbGMuQ2FjaGVDbGVhclJlcXVlc3QaGC5jYWxjLkNhY2hl",
            "Q2xlYXJSZXNwb25zZSIAMrEBChFNb25pdG9yaW5nU2VydmljZRJMCglHZXRT",
            "dGF0dXMSHS5jYWxjLk1vbml0b3JpbmdVcGRhdGVSZXF1ZXN0Gh4uY2FsYy5N",
            "b25pdG9yaW5nVXBkYXRlUmVzcG9uc2UiABJOCglTdWJzY3JpYmUSHS5jYWxj",
            "Lk1vbml0b3JpbmdVcGRhdGVSZXF1ZXN0Gh4uY2FsYy5Nb25pdG9yaW5nVXBk",
            "YXRlUmVzcG9uc2UiADABQhWqAhJDYWxjdWxhdGlvblNlcnZpY2VQAGIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CalculationService.MonikerReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.DataSourceGetRequest), global::CalculationService.DataSourceGetRequest.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.DataSourceGetResponse), global::CalculationService.DataSourceGetResponse.Parser, new[]{ "Success", "NotFound", "Error" }, new[]{ "Resp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.CachePutRequest), global::CalculationService.CachePutRequest.Parser, new[]{ "Value", "RetainUntil" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.CachePutResponse), global::CalculationService.CachePutResponse.Parser, new[]{ "Success", "Error" }, new[]{ "Resp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.CacheRemoveRequest), global::CalculationService.CacheRemoveRequest.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.CacheRemoveResponse), global::CalculationService.CacheRemoveResponse.Parser, new[]{ "Success", "NotFound", "Error" }, new[]{ "Resp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.CacheClearRequest), global::CalculationService.CacheClearRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.CacheClearResponse), global::CalculationService.CacheClearResponse.Parser, new[]{ "Success", "Error" }, new[]{ "Resp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.CacheError), global::CalculationService.CacheError.Parser, new[]{ "Error" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.MonitoringUpdateRequest), global::CalculationService.MonitoringUpdateRequest.Parser, new[]{ "CorrelationId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.MonitoringUpdateResponse), global::CalculationService.MonitoringUpdateResponse.Parser, new[]{ "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.ReplicaStatus), global::CalculationService.ReplicaStatus.Parser, new[]{ "ReplicaId", "ConnectionInfo", "Started", "CurrentClock", "Counters", "CollectedStats", "ClusterStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.ClusterStatus), global::CalculationService.ClusterStatus.Parser, new[]{ "Replicas" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.ReplicaConnectionInfo), global::CalculationService.ReplicaConnectionInfo.Parser, new[]{ "Host", "Port" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.ReplicaCounters), global::CalculationService.ReplicaCounters.Parser, new[]{ "AddsCounter", "DeletesCounter", "CopysCounter", "GetCounter", "ContainsCounter", "KeySearchCounter", "MetadataSearchCounter", "PageSearchCounter", "LargestKeySize", "LargestValueSize", "ReplicatedAdds", "ReplicatedDeletes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.CollectedStats), global::CalculationService.CollectedStats.Parser, new[]{ "NonExpiredKeys", "AllKeys", "ActiveKeys", "DeletedKeys", "ExpiredKeys" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DataSourceGetRequest : pb::IMessage<DataSourceGetRequest> {
    private static readonly pb::MessageParser<DataSourceGetRequest> _parser = new pb::MessageParser<DataSourceGetRequest>(() => new DataSourceGetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSourceGetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSourceGetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSourceGetRequest(DataSourceGetRequest other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSourceGetRequest Clone() {
      return new DataSourceGetRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::CalculationService.MonikerId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.MonikerId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSourceGetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSourceGetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSourceGetRequest other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::CalculationService.MonikerId();
        }
        Id.MergeFrom(other.Id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::CalculationService.MonikerId();
            }
            input.ReadMessage(Id);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataSourceGetResponse : pb::IMessage<DataSourceGetResponse> {
    private static readonly pb::MessageParser<DataSourceGetResponse> _parser = new pb::MessageParser<DataSourceGetResponse>(() => new DataSourceGetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSourceGetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSourceGetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSourceGetResponse(DataSourceGetResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.NotFound:
          NotFound = other.NotFound.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSourceGetResponse Clone() {
      return new DataSourceGetResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.StoredValue Success {
      get { return respCase_ == RespOneofCase.Success ? (global::CalculationService.StoredValue) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "notFound" field.</summary>
    public const int NotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.MonikerId NotFound {
      get { return respCase_ == RespOneofCase.NotFound ? (global::CalculationService.MonikerId) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.NotFound;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.CacheError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::CalculationService.CacheError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      NotFound = 2,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSourceGetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSourceGetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(NotFound, other.NotFound)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.NotFound) hash ^= NotFound.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        output.WriteRawTag(18);
        output.WriteMessage(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSourceGetResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::CalculationService.StoredValue();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.NotFound:
          if (NotFound == null) {
            NotFound = new global::CalculationService.MonikerId();
          }
          NotFound.MergeFrom(other.NotFound);
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::CalculationService.CacheError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::CalculationService.StoredValue subBuilder = new global::CalculationService.StoredValue();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 18: {
            global::CalculationService.MonikerId subBuilder = new global::CalculationService.MonikerId();
            if (respCase_ == RespOneofCase.NotFound) {
              subBuilder.MergeFrom(NotFound);
            }
            input.ReadMessage(subBuilder);
            NotFound = subBuilder;
            break;
          }
          case 802: {
            global::CalculationService.CacheError subBuilder = new global::CalculationService.CacheError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CachePutRequest : pb::IMessage<CachePutRequest> {
    private static readonly pb::MessageParser<CachePutRequest> _parser = new pb::MessageParser<CachePutRequest>(() => new CachePutRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CachePutRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CachePutRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CachePutRequest(CachePutRequest other) : this() {
      value_ = other.value_ != null ? other.value_.Clone() : null;
      retainUntil_ = other.retainUntil_ != null ? other.retainUntil_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CachePutRequest Clone() {
      return new CachePutRequest(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private global::CalculationService.StoredValue value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.StoredValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "retainUntil" field.</summary>
    public const int RetainUntilFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp retainUntil_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RetainUntil {
      get { return retainUntil_; }
      set {
        retainUntil_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CachePutRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CachePutRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Value, other.Value)) return false;
      if (!object.Equals(RetainUntil, other.RetainUntil)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (value_ != null) hash ^= Value.GetHashCode();
      if (retainUntil_ != null) hash ^= RetainUntil.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (value_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Value);
      }
      if (retainUntil_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RetainUntil);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (retainUntil_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RetainUntil);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CachePutRequest other) {
      if (other == null) {
        return;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::CalculationService.StoredValue();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.retainUntil_ != null) {
        if (retainUntil_ == null) {
          RetainUntil = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        RetainUntil.MergeFrom(other.RetainUntil);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (value_ == null) {
              Value = new global::CalculationService.StoredValue();
            }
            input.ReadMessage(Value);
            break;
          }
          case 18: {
            if (retainUntil_ == null) {
              RetainUntil = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RetainUntil);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO: Change to streaming?
  /// </summary>
  public sealed partial class CachePutResponse : pb::IMessage<CachePutResponse> {
    private static readonly pb::MessageParser<CachePutResponse> _parser = new pb::MessageParser<CachePutResponse>(() => new CachePutResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CachePutResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CachePutResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CachePutResponse(CachePutResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CachePutResponse Clone() {
      return new CachePutResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.StoredValue.Types.Metadata Success {
      get { return respCase_ == RespOneofCase.Success ? (global::CalculationService.StoredValue.Types.Metadata) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.CacheError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::CalculationService.CacheError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CachePutResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CachePutResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CachePutResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::CalculationService.StoredValue.Types.Metadata();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::CalculationService.CacheError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::CalculationService.StoredValue.Types.Metadata subBuilder = new global::CalculationService.StoredValue.Types.Metadata();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 802: {
            global::CalculationService.CacheError subBuilder = new global::CalculationService.CacheError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CacheRemoveRequest : pb::IMessage<CacheRemoveRequest> {
    private static readonly pb::MessageParser<CacheRemoveRequest> _parser = new pb::MessageParser<CacheRemoveRequest>(() => new CacheRemoveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CacheRemoveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheRemoveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheRemoveRequest(CacheRemoveRequest other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheRemoveRequest Clone() {
      return new CacheRemoveRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::CalculationService.MonikerId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.MonikerId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CacheRemoveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CacheRemoveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CacheRemoveRequest other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::CalculationService.MonikerId();
        }
        Id.MergeFrom(other.Id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::CalculationService.MonikerId();
            }
            input.ReadMessage(Id);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CacheRemoveResponse : pb::IMessage<CacheRemoveResponse> {
    private static readonly pb::MessageParser<CacheRemoveResponse> _parser = new pb::MessageParser<CacheRemoveResponse>(() => new CacheRemoveResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CacheRemoveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheRemoveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheRemoveResponse(CacheRemoveResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.NotFound:
          NotFound = other.NotFound.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheRemoveResponse Clone() {
      return new CacheRemoveResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Empty Success {
      get { return respCase_ == RespOneofCase.Success ? (global::Google.Protobuf.WellKnownTypes.Empty) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "notFound" field.</summary>
    public const int NotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.MonikerId NotFound {
      get { return respCase_ == RespOneofCase.NotFound ? (global::CalculationService.MonikerId) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.NotFound;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.CacheError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::CalculationService.CacheError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      NotFound = 2,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CacheRemoveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CacheRemoveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(NotFound, other.NotFound)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.NotFound) hash ^= NotFound.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        output.WriteRawTag(18);
        output.WriteMessage(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CacheRemoveResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::Google.Protobuf.WellKnownTypes.Empty();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.NotFound:
          if (NotFound == null) {
            NotFound = new global::CalculationService.MonikerId();
          }
          NotFound.MergeFrom(other.NotFound);
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::CalculationService.CacheError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 18: {
            global::CalculationService.MonikerId subBuilder = new global::CalculationService.MonikerId();
            if (respCase_ == RespOneofCase.NotFound) {
              subBuilder.MergeFrom(NotFound);
            }
            input.ReadMessage(subBuilder);
            NotFound = subBuilder;
            break;
          }
          case 802: {
            global::CalculationService.CacheError subBuilder = new global::CalculationService.CacheError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CacheClearRequest : pb::IMessage<CacheClearRequest> {
    private static readonly pb::MessageParser<CacheClearRequest> _parser = new pb::MessageParser<CacheClearRequest>(() => new CacheClearRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CacheClearRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheClearRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheClearRequest(CacheClearRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheClearRequest Clone() {
      return new CacheClearRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CacheClearRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CacheClearRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CacheClearRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CacheClearResponse : pb::IMessage<CacheClearResponse> {
    private static readonly pb::MessageParser<CacheClearResponse> _parser = new pb::MessageParser<CacheClearResponse>(() => new CacheClearResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CacheClearResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheClearResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheClearResponse(CacheClearResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheClearResponse Clone() {
      return new CacheClearResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Empty Success {
      get { return respCase_ == RespOneofCase.Success ? (global::Google.Protobuf.WellKnownTypes.Empty) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.CacheError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::CalculationService.CacheError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CacheClearResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CacheClearResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CacheClearResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::Google.Protobuf.WellKnownTypes.Empty();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::CalculationService.CacheError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 802: {
            global::CalculationService.CacheError subBuilder = new global::CalculationService.CacheError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CacheError : pb::IMessage<CacheError> {
    private static readonly pb::MessageParser<CacheError> _parser = new pb::MessageParser<CacheError>(() => new CacheError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CacheError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheError(CacheError other) : this() {
      error_ = other.error_ != null ? other.error_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheError Clone() {
      return new CacheError(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::CalculationService.InternalError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.InternalError Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CacheError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CacheError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CacheError other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          Error = new global::CalculationService.InternalError();
        }
        Error.MergeFrom(other.Error);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (error_ == null) {
              Error = new global::CalculationService.InternalError();
            }
            input.ReadMessage(Error);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitoringUpdateRequest : pb::IMessage<MonitoringUpdateRequest> {
    private static readonly pb::MessageParser<MonitoringUpdateRequest> _parser = new pb::MessageParser<MonitoringUpdateRequest>(() => new MonitoringUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitoringUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateRequest(MonitoringUpdateRequest other) : this() {
      correlationId_ = other.correlationId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateRequest Clone() {
      return new MonitoringUpdateRequest(this);
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitoringUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitoringUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitoringUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitoringUpdateResponse : pb::IMessage<MonitoringUpdateResponse> {
    private static readonly pb::MessageParser<MonitoringUpdateResponse> _parser = new pb::MessageParser<MonitoringUpdateResponse>(() => new MonitoringUpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitoringUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateResponse(MonitoringUpdateResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateResponse Clone() {
      return new MonitoringUpdateResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::CalculationService.ReplicaStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.ReplicaStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitoringUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitoringUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitoringUpdateResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::CalculationService.ReplicaStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::CalculationService.ReplicaStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicaStatus : pb::IMessage<ReplicaStatus> {
    private static readonly pb::MessageParser<ReplicaStatus> _parser = new pb::MessageParser<ReplicaStatus>(() => new ReplicaStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicaStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaStatus(ReplicaStatus other) : this() {
      replicaId_ = other.replicaId_;
      connectionInfo_ = other.connectionInfo_ != null ? other.connectionInfo_.Clone() : null;
      started_ = other.started_ != null ? other.started_.Clone() : null;
      currentClock_ = other.currentClock_ != null ? other.currentClock_.Clone() : null;
      counters_ = other.counters_ != null ? other.counters_.Clone() : null;
      collectedStats_ = other.collectedStats_ != null ? other.collectedStats_.Clone() : null;
      clusterStatus_ = other.clusterStatus_ != null ? other.clusterStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaStatus Clone() {
      return new ReplicaStatus(this);
    }

    /// <summary>Field number for the "replicaId" field.</summary>
    public const int ReplicaIdFieldNumber = 1;
    private string replicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplicaId {
      get { return replicaId_; }
      set {
        replicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connectionInfo" field.</summary>
    public const int ConnectionInfoFieldNumber = 2;
    private global::CalculationService.ReplicaConnectionInfo connectionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.ReplicaConnectionInfo ConnectionInfo {
      get { return connectionInfo_; }
      set {
        connectionInfo_ = value;
      }
    }

    /// <summary>Field number for the "started" field.</summary>
    public const int StartedFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp started_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Started {
      get { return started_; }
      set {
        started_ = value;
      }
    }

    /// <summary>Field number for the "currentClock" field.</summary>
    public const int CurrentClockFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp currentClock_;
    /// <summary>
    ///  ReplicaConfig replicaConfig           = 4;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CurrentClock {
      get { return currentClock_; }
      set {
        currentClock_ = value;
      }
    }

    /// <summary>Field number for the "counters" field.</summary>
    public const int CountersFieldNumber = 10;
    private global::CalculationService.ReplicaCounters counters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.ReplicaCounters Counters {
      get { return counters_; }
      set {
        counters_ = value;
      }
    }

    /// <summary>Field number for the "collectedStats" field.</summary>
    public const int CollectedStatsFieldNumber = 11;
    private global::CalculationService.CollectedStats collectedStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.CollectedStats CollectedStats {
      get { return collectedStats_; }
      set {
        collectedStats_ = value;
      }
    }

    /// <summary>Field number for the "clusterStatus" field.</summary>
    public const int ClusterStatusFieldNumber = 12;
    private global::CalculationService.ClusterStatus clusterStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.ClusterStatus ClusterStatus {
      get { return clusterStatus_; }
      set {
        clusterStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicaStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicaStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplicaId != other.ReplicaId) return false;
      if (!object.Equals(ConnectionInfo, other.ConnectionInfo)) return false;
      if (!object.Equals(Started, other.Started)) return false;
      if (!object.Equals(CurrentClock, other.CurrentClock)) return false;
      if (!object.Equals(Counters, other.Counters)) return false;
      if (!object.Equals(CollectedStats, other.CollectedStats)) return false;
      if (!object.Equals(ClusterStatus, other.ClusterStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplicaId.Length != 0) hash ^= ReplicaId.GetHashCode();
      if (connectionInfo_ != null) hash ^= ConnectionInfo.GetHashCode();
      if (started_ != null) hash ^= Started.GetHashCode();
      if (currentClock_ != null) hash ^= CurrentClock.GetHashCode();
      if (counters_ != null) hash ^= Counters.GetHashCode();
      if (collectedStats_ != null) hash ^= CollectedStats.GetHashCode();
      if (clusterStatus_ != null) hash ^= ClusterStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplicaId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReplicaId);
      }
      if (connectionInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConnectionInfo);
      }
      if (started_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Started);
      }
      if (currentClock_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CurrentClock);
      }
      if (counters_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Counters);
      }
      if (collectedStats_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CollectedStats);
      }
      if (clusterStatus_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ClusterStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplicaId);
      }
      if (connectionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectionInfo);
      }
      if (started_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Started);
      }
      if (currentClock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentClock);
      }
      if (counters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Counters);
      }
      if (collectedStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectedStats);
      }
      if (clusterStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClusterStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicaStatus other) {
      if (other == null) {
        return;
      }
      if (other.ReplicaId.Length != 0) {
        ReplicaId = other.ReplicaId;
      }
      if (other.connectionInfo_ != null) {
        if (connectionInfo_ == null) {
          ConnectionInfo = new global::CalculationService.ReplicaConnectionInfo();
        }
        ConnectionInfo.MergeFrom(other.ConnectionInfo);
      }
      if (other.started_ != null) {
        if (started_ == null) {
          Started = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Started.MergeFrom(other.Started);
      }
      if (other.currentClock_ != null) {
        if (currentClock_ == null) {
          CurrentClock = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CurrentClock.MergeFrom(other.CurrentClock);
      }
      if (other.counters_ != null) {
        if (counters_ == null) {
          Counters = new global::CalculationService.ReplicaCounters();
        }
        Counters.MergeFrom(other.Counters);
      }
      if (other.collectedStats_ != null) {
        if (collectedStats_ == null) {
          CollectedStats = new global::CalculationService.CollectedStats();
        }
        CollectedStats.MergeFrom(other.CollectedStats);
      }
      if (other.clusterStatus_ != null) {
        if (clusterStatus_ == null) {
          ClusterStatus = new global::CalculationService.ClusterStatus();
        }
        ClusterStatus.MergeFrom(other.ClusterStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReplicaId = input.ReadString();
            break;
          }
          case 18: {
            if (connectionInfo_ == null) {
              ConnectionInfo = new global::CalculationService.ReplicaConnectionInfo();
            }
            input.ReadMessage(ConnectionInfo);
            break;
          }
          case 26: {
            if (started_ == null) {
              Started = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Started);
            break;
          }
          case 42: {
            if (currentClock_ == null) {
              CurrentClock = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CurrentClock);
            break;
          }
          case 82: {
            if (counters_ == null) {
              Counters = new global::CalculationService.ReplicaCounters();
            }
            input.ReadMessage(Counters);
            break;
          }
          case 90: {
            if (collectedStats_ == null) {
              CollectedStats = new global::CalculationService.CollectedStats();
            }
            input.ReadMessage(CollectedStats);
            break;
          }
          case 98: {
            if (clusterStatus_ == null) {
              ClusterStatus = new global::CalculationService.ClusterStatus();
            }
            input.ReadMessage(ClusterStatus);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClusterStatus : pb::IMessage<ClusterStatus> {
    private static readonly pb::MessageParser<ClusterStatus> _parser = new pb::MessageParser<ClusterStatus>(() => new ClusterStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterStatus(ClusterStatus other) : this() {
      replicas_ = other.replicas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterStatus Clone() {
      return new ClusterStatus(this);
    }

    /// <summary>Field number for the "replicas" field.</summary>
    public const int ReplicasFieldNumber = 1;
    private static readonly pbc::MapField<string, global::CalculationService.ReplicaConnectionInfo>.Codec _map_replicas_codec
        = new pbc::MapField<string, global::CalculationService.ReplicaConnectionInfo>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::CalculationService.ReplicaConnectionInfo.Parser), 10);
    private readonly pbc::MapField<string, global::CalculationService.ReplicaConnectionInfo> replicas_ = new pbc::MapField<string, global::CalculationService.ReplicaConnectionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::CalculationService.ReplicaConnectionInfo> Replicas {
      get { return replicas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Replicas.Equals(other.Replicas)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Replicas.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      replicas_.WriteTo(output, _map_replicas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += replicas_.CalculateSize(_map_replicas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterStatus other) {
      if (other == null) {
        return;
      }
      replicas_.Add(other.replicas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            replicas_.AddEntriesFrom(input, _map_replicas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicaConnectionInfo : pb::IMessage<ReplicaConnectionInfo> {
    private static readonly pb::MessageParser<ReplicaConnectionInfo> _parser = new pb::MessageParser<ReplicaConnectionInfo>(() => new ReplicaConnectionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicaConnectionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConnectionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConnectionInfo(ReplicaConnectionInfo other) : this() {
      host_ = other.host_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConnectionInfo Clone() {
      return new ReplicaConnectionInfo(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    /// <summary>
    /// Some other metadata?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicaConnectionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicaConnectionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicaConnectionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicaCounters : pb::IMessage<ReplicaCounters> {
    private static readonly pb::MessageParser<ReplicaCounters> _parser = new pb::MessageParser<ReplicaCounters>(() => new ReplicaCounters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicaCounters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaCounters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaCounters(ReplicaCounters other) : this() {
      addsCounter_ = other.addsCounter_;
      deletesCounter_ = other.deletesCounter_;
      copysCounter_ = other.copysCounter_;
      getCounter_ = other.getCounter_;
      containsCounter_ = other.containsCounter_;
      keySearchCounter_ = other.keySearchCounter_;
      metadataSearchCounter_ = other.metadataSearchCounter_;
      pageSearchCounter_ = other.pageSearchCounter_;
      largestKeySize_ = other.largestKeySize_;
      largestValueSize_ = other.largestValueSize_;
      replicatedAdds_ = other.replicatedAdds_;
      replicatedDeletes_ = other.replicatedDeletes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaCounters Clone() {
      return new ReplicaCounters(this);
    }

    /// <summary>Field number for the "addsCounter" field.</summary>
    public const int AddsCounterFieldNumber = 1;
    private ulong addsCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AddsCounter {
      get { return addsCounter_; }
      set {
        addsCounter_ = value;
      }
    }

    /// <summary>Field number for the "deletesCounter" field.</summary>
    public const int DeletesCounterFieldNumber = 2;
    private ulong deletesCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DeletesCounter {
      get { return deletesCounter_; }
      set {
        deletesCounter_ = value;
      }
    }

    /// <summary>Field number for the "copysCounter" field.</summary>
    public const int CopysCounterFieldNumber = 3;
    private ulong copysCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CopysCounter {
      get { return copysCounter_; }
      set {
        copysCounter_ = value;
      }
    }

    /// <summary>Field number for the "getCounter" field.</summary>
    public const int GetCounterFieldNumber = 4;
    private ulong getCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GetCounter {
      get { return getCounter_; }
      set {
        getCounter_ = value;
      }
    }

    /// <summary>Field number for the "containsCounter" field.</summary>
    public const int ContainsCounterFieldNumber = 5;
    private ulong containsCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContainsCounter {
      get { return containsCounter_; }
      set {
        containsCounter_ = value;
      }
    }

    /// <summary>Field number for the "keySearchCounter" field.</summary>
    public const int KeySearchCounterFieldNumber = 6;
    private ulong keySearchCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KeySearchCounter {
      get { return keySearchCounter_; }
      set {
        keySearchCounter_ = value;
      }
    }

    /// <summary>Field number for the "metadataSearchCounter" field.</summary>
    public const int MetadataSearchCounterFieldNumber = 7;
    private ulong metadataSearchCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MetadataSearchCounter {
      get { return metadataSearchCounter_; }
      set {
        metadataSearchCounter_ = value;
      }
    }

    /// <summary>Field number for the "pageSearchCounter" field.</summary>
    public const int PageSearchCounterFieldNumber = 8;
    private ulong pageSearchCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PageSearchCounter {
      get { return pageSearchCounter_; }
      set {
        pageSearchCounter_ = value;
      }
    }

    /// <summary>Field number for the "largestKeySize" field.</summary>
    public const int LargestKeySizeFieldNumber = 10;
    private uint largestKeySize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LargestKeySize {
      get { return largestKeySize_; }
      set {
        largestKeySize_ = value;
      }
    }

    /// <summary>Field number for the "largestValueSize" field.</summary>
    public const int LargestValueSizeFieldNumber = 11;
    private uint largestValueSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LargestValueSize {
      get { return largestValueSize_; }
      set {
        largestValueSize_ = value;
      }
    }

    /// <summary>Field number for the "replicatedAdds" field.</summary>
    public const int ReplicatedAddsFieldNumber = 15;
    private ulong replicatedAdds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ReplicatedAdds {
      get { return replicatedAdds_; }
      set {
        replicatedAdds_ = value;
      }
    }

    /// <summary>Field number for the "replicatedDeletes" field.</summary>
    public const int ReplicatedDeletesFieldNumber = 16;
    private ulong replicatedDeletes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ReplicatedDeletes {
      get { return replicatedDeletes_; }
      set {
        replicatedDeletes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicaCounters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicaCounters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddsCounter != other.AddsCounter) return false;
      if (DeletesCounter != other.DeletesCounter) return false;
      if (CopysCounter != other.CopysCounter) return false;
      if (GetCounter != other.GetCounter) return false;
      if (ContainsCounter != other.ContainsCounter) return false;
      if (KeySearchCounter != other.KeySearchCounter) return false;
      if (MetadataSearchCounter != other.MetadataSearchCounter) return false;
      if (PageSearchCounter != other.PageSearchCounter) return false;
      if (LargestKeySize != other.LargestKeySize) return false;
      if (LargestValueSize != other.LargestValueSize) return false;
      if (ReplicatedAdds != other.ReplicatedAdds) return false;
      if (ReplicatedDeletes != other.ReplicatedDeletes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddsCounter != 0UL) hash ^= AddsCounter.GetHashCode();
      if (DeletesCounter != 0UL) hash ^= DeletesCounter.GetHashCode();
      if (CopysCounter != 0UL) hash ^= CopysCounter.GetHashCode();
      if (GetCounter != 0UL) hash ^= GetCounter.GetHashCode();
      if (ContainsCounter != 0UL) hash ^= ContainsCounter.GetHashCode();
      if (KeySearchCounter != 0UL) hash ^= KeySearchCounter.GetHashCode();
      if (MetadataSearchCounter != 0UL) hash ^= MetadataSearchCounter.GetHashCode();
      if (PageSearchCounter != 0UL) hash ^= PageSearchCounter.GetHashCode();
      if (LargestKeySize != 0) hash ^= LargestKeySize.GetHashCode();
      if (LargestValueSize != 0) hash ^= LargestValueSize.GetHashCode();
      if (ReplicatedAdds != 0UL) hash ^= ReplicatedAdds.GetHashCode();
      if (ReplicatedDeletes != 0UL) hash ^= ReplicatedDeletes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddsCounter != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AddsCounter);
      }
      if (DeletesCounter != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DeletesCounter);
      }
      if (CopysCounter != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CopysCounter);
      }
      if (GetCounter != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(GetCounter);
      }
      if (ContainsCounter != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ContainsCounter);
      }
      if (KeySearchCounter != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(KeySearchCounter);
      }
      if (MetadataSearchCounter != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MetadataSearchCounter);
      }
      if (PageSearchCounter != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(PageSearchCounter);
      }
      if (LargestKeySize != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(LargestKeySize);
      }
      if (LargestValueSize != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(LargestValueSize);
      }
      if (ReplicatedAdds != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(ReplicatedAdds);
      }
      if (ReplicatedDeletes != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(ReplicatedDeletes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddsCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AddsCounter);
      }
      if (DeletesCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeletesCounter);
      }
      if (CopysCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CopysCounter);
      }
      if (GetCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GetCounter);
      }
      if (ContainsCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ContainsCounter);
      }
      if (KeySearchCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KeySearchCounter);
      }
      if (MetadataSearchCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MetadataSearchCounter);
      }
      if (PageSearchCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PageSearchCounter);
      }
      if (LargestKeySize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LargestKeySize);
      }
      if (LargestValueSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LargestValueSize);
      }
      if (ReplicatedAdds != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ReplicatedAdds);
      }
      if (ReplicatedDeletes != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ReplicatedDeletes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicaCounters other) {
      if (other == null) {
        return;
      }
      if (other.AddsCounter != 0UL) {
        AddsCounter = other.AddsCounter;
      }
      if (other.DeletesCounter != 0UL) {
        DeletesCounter = other.DeletesCounter;
      }
      if (other.CopysCounter != 0UL) {
        CopysCounter = other.CopysCounter;
      }
      if (other.GetCounter != 0UL) {
        GetCounter = other.GetCounter;
      }
      if (other.ContainsCounter != 0UL) {
        ContainsCounter = other.ContainsCounter;
      }
      if (other.KeySearchCounter != 0UL) {
        KeySearchCounter = other.KeySearchCounter;
      }
      if (other.MetadataSearchCounter != 0UL) {
        MetadataSearchCounter = other.MetadataSearchCounter;
      }
      if (other.PageSearchCounter != 0UL) {
        PageSearchCounter = other.PageSearchCounter;
      }
      if (other.LargestKeySize != 0) {
        LargestKeySize = other.LargestKeySize;
      }
      if (other.LargestValueSize != 0) {
        LargestValueSize = other.LargestValueSize;
      }
      if (other.ReplicatedAdds != 0UL) {
        ReplicatedAdds = other.ReplicatedAdds;
      }
      if (other.ReplicatedDeletes != 0UL) {
        ReplicatedDeletes = other.ReplicatedDeletes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AddsCounter = input.ReadUInt64();
            break;
          }
          case 16: {
            DeletesCounter = input.ReadUInt64();
            break;
          }
          case 24: {
            CopysCounter = input.ReadUInt64();
            break;
          }
          case 32: {
            GetCounter = input.ReadUInt64();
            break;
          }
          case 40: {
            ContainsCounter = input.ReadUInt64();
            break;
          }
          case 48: {
            KeySearchCounter = input.ReadUInt64();
            break;
          }
          case 56: {
            MetadataSearchCounter = input.ReadUInt64();
            break;
          }
          case 64: {
            PageSearchCounter = input.ReadUInt64();
            break;
          }
          case 80: {
            LargestKeySize = input.ReadUInt32();
            break;
          }
          case 88: {
            LargestValueSize = input.ReadUInt32();
            break;
          }
          case 120: {
            ReplicatedAdds = input.ReadUInt64();
            break;
          }
          case 128: {
            ReplicatedDeletes = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CollectedStats : pb::IMessage<CollectedStats> {
    private static readonly pb::MessageParser<CollectedStats> _parser = new pb::MessageParser<CollectedStats>(() => new CollectedStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectedStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.CacheReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectedStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectedStats(CollectedStats other) : this() {
      nonExpiredKeys_ = other.nonExpiredKeys_;
      allKeys_ = other.allKeys_;
      activeKeys_ = other.activeKeys_;
      deletedKeys_ = other.deletedKeys_;
      expiredKeys_ = other.expiredKeys_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectedStats Clone() {
      return new CollectedStats(this);
    }

    /// <summary>Field number for the "nonExpiredKeys" field.</summary>
    public const int NonExpiredKeysFieldNumber = 10;
    private ulong nonExpiredKeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NonExpiredKeys {
      get { return nonExpiredKeys_; }
      set {
        nonExpiredKeys_ = value;
      }
    }

    /// <summary>Field number for the "allKeys" field.</summary>
    public const int AllKeysFieldNumber = 11;
    private ulong allKeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AllKeys {
      get { return allKeys_; }
      set {
        allKeys_ = value;
      }
    }

    /// <summary>Field number for the "activeKeys" field.</summary>
    public const int ActiveKeysFieldNumber = 12;
    private ulong activeKeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ActiveKeys {
      get { return activeKeys_; }
      set {
        activeKeys_ = value;
      }
    }

    /// <summary>Field number for the "deletedKeys" field.</summary>
    public const int DeletedKeysFieldNumber = 13;
    private ulong deletedKeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DeletedKeys {
      get { return deletedKeys_; }
      set {
        deletedKeys_ = value;
      }
    }

    /// <summary>Field number for the "expiredKeys" field.</summary>
    public const int ExpiredKeysFieldNumber = 14;
    private ulong expiredKeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpiredKeys {
      get { return expiredKeys_; }
      set {
        expiredKeys_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectedStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectedStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NonExpiredKeys != other.NonExpiredKeys) return false;
      if (AllKeys != other.AllKeys) return false;
      if (ActiveKeys != other.ActiveKeys) return false;
      if (DeletedKeys != other.DeletedKeys) return false;
      if (ExpiredKeys != other.ExpiredKeys) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NonExpiredKeys != 0UL) hash ^= NonExpiredKeys.GetHashCode();
      if (AllKeys != 0UL) hash ^= AllKeys.GetHashCode();
      if (ActiveKeys != 0UL) hash ^= ActiveKeys.GetHashCode();
      if (DeletedKeys != 0UL) hash ^= DeletedKeys.GetHashCode();
      if (ExpiredKeys != 0UL) hash ^= ExpiredKeys.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NonExpiredKeys != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(NonExpiredKeys);
      }
      if (AllKeys != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(AllKeys);
      }
      if (ActiveKeys != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(ActiveKeys);
      }
      if (DeletedKeys != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(DeletedKeys);
      }
      if (ExpiredKeys != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(ExpiredKeys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NonExpiredKeys != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NonExpiredKeys);
      }
      if (AllKeys != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AllKeys);
      }
      if (ActiveKeys != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ActiveKeys);
      }
      if (DeletedKeys != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeletedKeys);
      }
      if (ExpiredKeys != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpiredKeys);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectedStats other) {
      if (other == null) {
        return;
      }
      if (other.NonExpiredKeys != 0UL) {
        NonExpiredKeys = other.NonExpiredKeys;
      }
      if (other.AllKeys != 0UL) {
        AllKeys = other.AllKeys;
      }
      if (other.ActiveKeys != 0UL) {
        ActiveKeys = other.ActiveKeys;
      }
      if (other.DeletedKeys != 0UL) {
        DeletedKeys = other.DeletedKeys;
      }
      if (other.ExpiredKeys != 0UL) {
        ExpiredKeys = other.ExpiredKeys;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            NonExpiredKeys = input.ReadUInt64();
            break;
          }
          case 88: {
            AllKeys = input.ReadUInt64();
            break;
          }
          case 96: {
            ActiveKeys = input.ReadUInt64();
            break;
          }
          case 104: {
            DeletedKeys = input.ReadUInt64();
            break;
          }
          case 112: {
            ExpiredKeys = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
