// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: moniker.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CalculationService {

  /// <summary>Holder for reflection information generated from moniker.proto</summary>
  public static partial class MonikerReflection {

    #region Descriptor
    /// <summary>File descriptor for moniker.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonikerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tb25pa2VyLnByb3RvEgRjYWxjGhtnb29nbGUvcHJvdG9idWYvZW1wdHku",
            "cHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8iNwoLUG9p",
            "bnRJblRpbWUSKAoEdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXAiIAoRTW9uaWtlcklkZW50aWZpZXISCwoDa2V5GAEgASgJIm4KEE1v",
            "bmlrZXJWZXJzaW9uSWQSIwoCaWQYASABKAsyFy5jYWxjLk1vbmlrZXJJZGVu",
            "dGlmaWVyEg8KB3ZlcnNpb24YAiABKAQSJAoJdGltZXN0YW1wGAUgASgLMhEu",
            "Y2FsYy5Qb2ludEluVGltZSLGAQoUTW9uaWtlclZlcnNpb25QYXJ0SWQSIwoC",
            "aWQYASABKAsyFy5jYWxjLk1vbmlrZXJJZGVudGlmaWVyEg8KB3ZlcnNpb24Y",
            "AiABKAQSEQoJcGFydEluZGV4GAMgASgNEhIKCnBhcnRzQ291bnQYBCABKA0S",
            "JAoJdGltZXN0YW1wGAUgASgLMhEuY2FsYy5Qb2ludEluVGltZRIrCghjaGVj",
            "a3N1bRgGIAEoCzIZLmNhbGMuU3RvcmVkVmFsdWVDaGVja3N1bSJsCglNb25p",
            "a2VySWQSKQoGbGF0ZXN0GAEgASgLMhcuY2FsYy5Nb25pa2VySWRlbnRpZmll",
            "ckgAEikKB3ZlcnNpb24YAiABKAsyFi5jYWxjLk1vbmlrZXJWZXJzaW9uSWRI",
            "AEIJCgdtb25pa2VyIiMKE1N0b3JlZFZhbHVlQ2hlY2tzdW0SDAoEaGFzaBgB",
            "IAEoBCLrAwoLU3RvcmVkVmFsdWUSJgoCaWQYASABKAsyGi5jYWxjLk1vbmlr",
            "ZXJWZXJzaW9uUGFydElkEiwKCG1ldGFkYXRhGAIgASgLMhouY2FsYy5TdG9y",
            "ZWRWYWx1ZS5NZXRhZGF0YRIUCgpieXRlc1ZhbHVlGAogASgMSAASFQoLc3Ry",
            "aW5nVmFsdWUYCyABKAlIABIxCglqc29uVmFsdWUYDCABKAsyHC5jYWxjLlN0",
            "b3JlZFZhbHVlLkpzb25TdHJpbmdIABIyCgpzcGFya1ZhbHVlGA0gASgLMhwu",
            "Y2FsYy5TdG9yZWRWYWx1ZS5TcGFya1F1ZXJ5SAASNAoLcGFycXVldEZpbGUY",
            "DiABKAsyHS5jYWxjLlN0b3JlZFZhbHVlLlBhcnF1ZXRGaWxlSAAaSgoITWV0",
            "YWRhdGESDwoHY3JlYXRvchgBIAEoCRItCgljcmVhdGVkQXQYAiABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wGhoKCkpzb25TdHJpbmcSDAoEanNv",
            "bhgBIAEoCRouCgpTcGFya1F1ZXJ5EhEKCXNlcnZlclVyaRgBIAEoCRINCgVx",
            "dWVyeRgCIAEoCRobCgtQYXJxdWV0RmlsZRIMCgRwYXRoGAEgASgJQgcKBXZh",
            "bHVlIq0HCg1JbnRlcm5hbEVycm9yEkYKF21pc3NpbmdSZXF1aXJlZEFyZ3Vt",
            "ZW50GAEgASgLMiMuY2FsYy5JbnRlcm5hbEVycm9yLk1pc3NpbmdBcmd1bWVu",
            "dEgAEk4KF2lkZW50aWZpZXJEZWNvZGluZ0Vycm9yGAIgASgLMisuY2FsYy5J",
            "bnRlcm5hbEVycm9yLklkZW50aWZpZXJEZWNvZGluZ0Vycm9ySAASSwoZc3Rv",
            "cmFnZVZhbHVlRW5jb2RpbmdFcnJvchgDIAEoCzImLmNhbGMuSW50ZXJuYWxF",
            "cnJvci5WYWx1ZUVuY29kaW5nRXJyb3JIABJLChlzdG9yYWdlVmFsdWVEZWNv",
            "ZGluZ0Vycm9yGAQgASgLMiYuY2FsYy5JbnRlcm5hbEVycm9yLlZhbHVlRGVj",
            "b2RpbmdFcnJvckgAEhYKDHN0b3JhZ2VFcnJvchgFIAEoCUgAEhoKEG9wZXJh",
            "dGlvbkFib3J0ZWQYBiABKAlIABIUCgp2YWx1ZUVycm9yGAcgASgJSAASLwoN",
            "bm90QXV0aG9yaXplZBgKIAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eUgA",
            "EjUKE3NlcnZpY2VOb3RBdmFpbGFibGUYFCABKAsyFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHlIABo2Cg9NaXNzaW5nQXJndW1lbnQSEAoIcmVxdWlyZWQYASAB",
            "KAkSEQoJcmVtYWluaW5nGAIgASgEGqEBChdJZGVudGlmaWVyRGVjb2RpbmdF",
            "cnJvchITCgtkZXNjcmlwdGlvbhgBIAEoCRJECgVzdGFjaxgCIAMoCzI1LmNh",
            "bGMuSW50ZXJuYWxFcnJvci5JZGVudGlmaWVyRGVjb2RpbmdFcnJvci5TdGFj",
            "a0xpbmUaKwoJU3RhY2tMaW5lEg8KB21lc3NhZ2UYASABKAkSDQoFZmllbGQY",
            "AiABKAkaOQoSVmFsdWVFbmNvZGluZ0Vycm9yEhAKCHJlcXVpcmVkGAEgASgE",
            "EhEKCXJlbWFpbmluZxgCIAEoBBqXAQoSVmFsdWVEZWNvZGluZ0Vycm9yEhMK",
            "C2Rlc2NyaXB0aW9uGAEgASgJEj8KBXN0YWNrGAIgAygLMjAuY2FsYy5JbnRl",
            "cm5hbEVycm9yLlZhbHVlRGVjb2RpbmdFcnJvci5TdGFja0xpbmUaKwoJU3Rh",
            "Y2tMaW5lEg8KB21lc3NhZ2UYASABKAkSDQoFZmllbGQYAiABKAlCBwoFQ2F1",
            "c2VCFaoCEkNhbGN1bGF0aW9uU2VydmljZVAAUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.PointInTime), global::CalculationService.PointInTime.Parser, new[]{ "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.MonikerIdentifier), global::CalculationService.MonikerIdentifier.Parser, new[]{ "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.MonikerVersionId), global::CalculationService.MonikerVersionId.Parser, new[]{ "Id", "Version", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.MonikerVersionPartId), global::CalculationService.MonikerVersionPartId.Parser, new[]{ "Id", "Version", "PartIndex", "PartsCount", "Timestamp", "Checksum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.MonikerId), global::CalculationService.MonikerId.Parser, new[]{ "Latest", "Version" }, new[]{ "Moniker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.StoredValueChecksum), global::CalculationService.StoredValueChecksum.Parser, new[]{ "Hash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.StoredValue), global::CalculationService.StoredValue.Parser, new[]{ "Id", "Metadata", "BytesValue", "StringValue", "JsonValue", "SparkValue", "ParquetFile" }, new[]{ "Value" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.StoredValue.Types.Metadata), global::CalculationService.StoredValue.Types.Metadata.Parser, new[]{ "Creator", "CreatedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.StoredValue.Types.JsonString), global::CalculationService.StoredValue.Types.JsonString.Parser, new[]{ "Json" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.StoredValue.Types.SparkQuery), global::CalculationService.StoredValue.Types.SparkQuery.Parser, new[]{ "ServerUri", "Query" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.StoredValue.Types.ParquetFile), global::CalculationService.StoredValue.Types.ParquetFile.Parser, new[]{ "Path" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.InternalError), global::CalculationService.InternalError.Parser, new[]{ "MissingRequiredArgument", "IdentifierDecodingError", "StorageValueEncodingError", "StorageValueDecodingError", "StorageError", "OperationAborted", "ValueError", "NotAuthorized", "ServiceNotAvailable" }, new[]{ "Cause" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.InternalError.Types.MissingArgument), global::CalculationService.InternalError.Types.MissingArgument.Parser, new[]{ "Required", "Remaining" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.InternalError.Types.IdentifierDecodingError), global::CalculationService.InternalError.Types.IdentifierDecodingError.Parser, new[]{ "Description", "Stack" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.InternalError.Types.IdentifierDecodingError.Types.StackLine), global::CalculationService.InternalError.Types.IdentifierDecodingError.Types.StackLine.Parser, new[]{ "Message", "Field" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.InternalError.Types.ValueEncodingError), global::CalculationService.InternalError.Types.ValueEncodingError.Parser, new[]{ "Required", "Remaining" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.InternalError.Types.ValueDecodingError), global::CalculationService.InternalError.Types.ValueDecodingError.Parser, new[]{ "Description", "Stack" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CalculationService.InternalError.Types.ValueDecodingError.Types.StackLine), global::CalculationService.InternalError.Types.ValueDecodingError.Types.StackLine.Parser, new[]{ "Message", "Field" }, null, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PointInTime : pb::IMessage<PointInTime> {
    private static readonly pb::MessageParser<PointInTime> _parser = new pb::MessageParser<PointInTime>(() => new PointInTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointInTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.MonikerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointInTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointInTime(PointInTime other) : this() {
      time_ = other.time_ != null ? other.time_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointInTime Clone() {
      return new PointInTime(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp time_;
    /// <summary>
    /// TODO: Think a version based identifier probably (VectorClock?)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointInTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointInTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointInTime other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Time.MergeFrom(other.Time);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Time);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonikerIdentifier : pb::IMessage<MonikerIdentifier> {
    private static readonly pb::MessageParser<MonikerIdentifier> _parser = new pb::MessageParser<MonikerIdentifier>(() => new MonikerIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonikerIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.MonikerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerIdentifier(MonikerIdentifier other) : this() {
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerIdentifier Clone() {
      return new MonikerIdentifier(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonikerIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonikerIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonikerIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonikerVersionId : pb::IMessage<MonikerVersionId> {
    private static readonly pb::MessageParser<MonikerVersionId> _parser = new pb::MessageParser<MonikerVersionId>(() => new MonikerVersionId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonikerVersionId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.MonikerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerVersionId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerVersionId(MonikerVersionId other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      version_ = other.version_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerVersionId Clone() {
      return new MonikerVersionId(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::CalculationService.MonikerIdentifier id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.MonikerIdentifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private ulong version_;
    /// <summary>
    /// TODO: Maybe VectorClock or UUID based?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private global::CalculationService.PointInTime timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.PointInTime Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonikerVersionId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonikerVersionId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Version != 0UL) hash ^= Version.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Version != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Version);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonikerVersionId other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::CalculationService.MonikerIdentifier();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::CalculationService.PointInTime();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::CalculationService.MonikerIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
          case 16: {
            Version = input.ReadUInt64();
            break;
          }
          case 42: {
            if (timestamp_ == null) {
              Timestamp = new global::CalculationService.PointInTime();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonikerVersionPartId : pb::IMessage<MonikerVersionPartId> {
    private static readonly pb::MessageParser<MonikerVersionPartId> _parser = new pb::MessageParser<MonikerVersionPartId>(() => new MonikerVersionPartId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonikerVersionPartId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.MonikerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerVersionPartId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerVersionPartId(MonikerVersionPartId other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      version_ = other.version_;
      partIndex_ = other.partIndex_;
      partsCount_ = other.partsCount_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      checksum_ = other.checksum_ != null ? other.checksum_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerVersionPartId Clone() {
      return new MonikerVersionPartId(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::CalculationService.MonikerIdentifier id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.MonikerIdentifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private ulong version_;
    /// <summary>
    /// TODO: Maybe VectorClock or UUID based?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "partIndex" field.</summary>
    public const int PartIndexFieldNumber = 3;
    private uint partIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartIndex {
      get { return partIndex_; }
      set {
        partIndex_ = value;
      }
    }

    /// <summary>Field number for the "partsCount" field.</summary>
    public const int PartsCountFieldNumber = 4;
    private uint partsCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartsCount {
      get { return partsCount_; }
      set {
        partsCount_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private global::CalculationService.PointInTime timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.PointInTime Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "checksum" field.</summary>
    public const int ChecksumFieldNumber = 6;
    private global::CalculationService.StoredValueChecksum checksum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.StoredValueChecksum Checksum {
      get { return checksum_; }
      set {
        checksum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonikerVersionPartId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonikerVersionPartId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Version != other.Version) return false;
      if (PartIndex != other.PartIndex) return false;
      if (PartsCount != other.PartsCount) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(Checksum, other.Checksum)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Version != 0UL) hash ^= Version.GetHashCode();
      if (PartIndex != 0) hash ^= PartIndex.GetHashCode();
      if (PartsCount != 0) hash ^= PartsCount.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (checksum_ != null) hash ^= Checksum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Version != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Version);
      }
      if (PartIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PartIndex);
      }
      if (PartsCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PartsCount);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Timestamp);
      }
      if (checksum_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Checksum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      if (PartIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartIndex);
      }
      if (PartsCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartsCount);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (checksum_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Checksum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonikerVersionPartId other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::CalculationService.MonikerIdentifier();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
      if (other.PartIndex != 0) {
        PartIndex = other.PartIndex;
      }
      if (other.PartsCount != 0) {
        PartsCount = other.PartsCount;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::CalculationService.PointInTime();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.checksum_ != null) {
        if (checksum_ == null) {
          Checksum = new global::CalculationService.StoredValueChecksum();
        }
        Checksum.MergeFrom(other.Checksum);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::CalculationService.MonikerIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
          case 16: {
            Version = input.ReadUInt64();
            break;
          }
          case 24: {
            PartIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            PartsCount = input.ReadUInt32();
            break;
          }
          case 42: {
            if (timestamp_ == null) {
              Timestamp = new global::CalculationService.PointInTime();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 50: {
            if (checksum_ == null) {
              Checksum = new global::CalculationService.StoredValueChecksum();
            }
            input.ReadMessage(Checksum);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonikerId : pb::IMessage<MonikerId> {
    private static readonly pb::MessageParser<MonikerId> _parser = new pb::MessageParser<MonikerId>(() => new MonikerId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonikerId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.MonikerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerId(MonikerId other) : this() {
      switch (other.MonikerCase) {
        case MonikerOneofCase.Latest:
          Latest = other.Latest.Clone();
          break;
        case MonikerOneofCase.Version:
          Version = other.Version.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerId Clone() {
      return new MonikerId(this);
    }

    /// <summary>Field number for the "latest" field.</summary>
    public const int LatestFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.MonikerIdentifier Latest {
      get { return monikerCase_ == MonikerOneofCase.Latest ? (global::CalculationService.MonikerIdentifier) moniker_ : null; }
      set {
        moniker_ = value;
        monikerCase_ = value == null ? MonikerOneofCase.None : MonikerOneofCase.Latest;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.MonikerVersionId Version {
      get { return monikerCase_ == MonikerOneofCase.Version ? (global::CalculationService.MonikerVersionId) moniker_ : null; }
      set {
        moniker_ = value;
        monikerCase_ = value == null ? MonikerOneofCase.None : MonikerOneofCase.Version;
      }
    }

    private object moniker_;
    /// <summary>Enum of possible cases for the "moniker" oneof.</summary>
    public enum MonikerOneofCase {
      None = 0,
      Latest = 1,
      Version = 2,
    }
    private MonikerOneofCase monikerCase_ = MonikerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonikerOneofCase MonikerCase {
      get { return monikerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoniker() {
      monikerCase_ = MonikerOneofCase.None;
      moniker_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonikerId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonikerId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Latest, other.Latest)) return false;
      if (!object.Equals(Version, other.Version)) return false;
      if (MonikerCase != other.MonikerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (monikerCase_ == MonikerOneofCase.Latest) hash ^= Latest.GetHashCode();
      if (monikerCase_ == MonikerOneofCase.Version) hash ^= Version.GetHashCode();
      hash ^= (int) monikerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (monikerCase_ == MonikerOneofCase.Latest) {
        output.WriteRawTag(10);
        output.WriteMessage(Latest);
      }
      if (monikerCase_ == MonikerOneofCase.Version) {
        output.WriteRawTag(18);
        output.WriteMessage(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (monikerCase_ == MonikerOneofCase.Latest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Latest);
      }
      if (monikerCase_ == MonikerOneofCase.Version) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonikerId other) {
      if (other == null) {
        return;
      }
      switch (other.MonikerCase) {
        case MonikerOneofCase.Latest:
          if (Latest == null) {
            Latest = new global::CalculationService.MonikerIdentifier();
          }
          Latest.MergeFrom(other.Latest);
          break;
        case MonikerOneofCase.Version:
          if (Version == null) {
            Version = new global::CalculationService.MonikerVersionId();
          }
          Version.MergeFrom(other.Version);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::CalculationService.MonikerIdentifier subBuilder = new global::CalculationService.MonikerIdentifier();
            if (monikerCase_ == MonikerOneofCase.Latest) {
              subBuilder.MergeFrom(Latest);
            }
            input.ReadMessage(subBuilder);
            Latest = subBuilder;
            break;
          }
          case 18: {
            global::CalculationService.MonikerVersionId subBuilder = new global::CalculationService.MonikerVersionId();
            if (monikerCase_ == MonikerOneofCase.Version) {
              subBuilder.MergeFrom(Version);
            }
            input.ReadMessage(subBuilder);
            Version = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoredValueChecksum : pb::IMessage<StoredValueChecksum> {
    private static readonly pb::MessageParser<StoredValueChecksum> _parser = new pb::MessageParser<StoredValueChecksum>(() => new StoredValueChecksum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoredValueChecksum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.MonikerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoredValueChecksum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoredValueChecksum(StoredValueChecksum other) : this() {
      hash_ = other.hash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoredValueChecksum Clone() {
      return new StoredValueChecksum(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private ulong hash_;
    /// <summary>
    /// SipHash_2_4 (64bit) should be good enough and also can be used as a Unique Value Identifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Hash {
      get { return hash_; }
      set {
        hash_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoredValueChecksum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoredValueChecksum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash != 0UL) hash ^= Hash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Hash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Hash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoredValueChecksum other) {
      if (other == null) {
        return;
      }
      if (other.Hash != 0UL) {
        Hash = other.Hash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Hash = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoredValue : pb::IMessage<StoredValue> {
    private static readonly pb::MessageParser<StoredValue> _parser = new pb::MessageParser<StoredValue>(() => new StoredValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoredValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.MonikerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoredValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoredValue(StoredValue other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      switch (other.ValueCase) {
        case ValueOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.JsonValue:
          JsonValue = other.JsonValue.Clone();
          break;
        case ValueOneofCase.SparkValue:
          SparkValue = other.SparkValue.Clone();
          break;
        case ValueOneofCase.ParquetFile:
          ParquetFile = other.ParquetFile.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoredValue Clone() {
      return new StoredValue(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::CalculationService.MonikerVersionPartId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.MonikerVersionPartId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 2;
    private global::CalculationService.StoredValue.Types.Metadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.StoredValue.Types.Metadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "bytesValue" field.</summary>
    public const int BytesValueFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesValue {
      get { return valueCase_ == ValueOneofCase.BytesValue ? (pb::ByteString) value_ : pb::ByteString.Empty; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.BytesValue;
      }
    }

    /// <summary>Field number for the "stringValue" field.</summary>
    public const int StringValueFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return valueCase_ == ValueOneofCase.StringValue ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "jsonValue" field.</summary>
    public const int JsonValueFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.StoredValue.Types.JsonString JsonValue {
      get { return valueCase_ == ValueOneofCase.JsonValue ? (global::CalculationService.StoredValue.Types.JsonString) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.JsonValue;
      }
    }

    /// <summary>Field number for the "sparkValue" field.</summary>
    public const int SparkValueFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.StoredValue.Types.SparkQuery SparkValue {
      get { return valueCase_ == ValueOneofCase.SparkValue ? (global::CalculationService.StoredValue.Types.SparkQuery) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.SparkValue;
      }
    }

    /// <summary>Field number for the "parquetFile" field.</summary>
    public const int ParquetFileFieldNumber = 14;
    /// <summary>
    ///    CalculatorRun calculatorRun = 15;  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.StoredValue.Types.ParquetFile ParquetFile {
      get { return valueCase_ == ValueOneofCase.ParquetFile ? (global::CalculationService.StoredValue.Types.ParquetFile) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.ParquetFile;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      BytesValue = 10,
      StringValue = 11,
      JsonValue = 12,
      SparkValue = 13,
      ParquetFile = 14,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoredValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoredValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (BytesValue != other.BytesValue) return false;
      if (StringValue != other.StringValue) return false;
      if (!object.Equals(JsonValue, other.JsonValue)) return false;
      if (!object.Equals(SparkValue, other.SparkValue)) return false;
      if (!object.Equals(ParquetFile, other.ParquetFile)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (valueCase_ == ValueOneofCase.BytesValue) hash ^= BytesValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.JsonValue) hash ^= JsonValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.SparkValue) hash ^= SparkValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.ParquetFile) hash ^= ParquetFile.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (metadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Metadata);
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        output.WriteRawTag(82);
        output.WriteBytes(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        output.WriteRawTag(90);
        output.WriteString(StringValue);
      }
      if (valueCase_ == ValueOneofCase.JsonValue) {
        output.WriteRawTag(98);
        output.WriteMessage(JsonValue);
      }
      if (valueCase_ == ValueOneofCase.SparkValue) {
        output.WriteRawTag(106);
        output.WriteMessage(SparkValue);
      }
      if (valueCase_ == ValueOneofCase.ParquetFile) {
        output.WriteRawTag(114);
        output.WriteMessage(ParquetFile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (valueCase_ == ValueOneofCase.JsonValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JsonValue);
      }
      if (valueCase_ == ValueOneofCase.SparkValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SparkValue);
      }
      if (valueCase_ == ValueOneofCase.ParquetFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParquetFile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoredValue other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::CalculationService.MonikerVersionPartId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::CalculationService.StoredValue.Types.Metadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      switch (other.ValueCase) {
        case ValueOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.JsonValue:
          if (JsonValue == null) {
            JsonValue = new global::CalculationService.StoredValue.Types.JsonString();
          }
          JsonValue.MergeFrom(other.JsonValue);
          break;
        case ValueOneofCase.SparkValue:
          if (SparkValue == null) {
            SparkValue = new global::CalculationService.StoredValue.Types.SparkQuery();
          }
          SparkValue.MergeFrom(other.SparkValue);
          break;
        case ValueOneofCase.ParquetFile:
          if (ParquetFile == null) {
            ParquetFile = new global::CalculationService.StoredValue.Types.ParquetFile();
          }
          ParquetFile.MergeFrom(other.ParquetFile);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::CalculationService.MonikerVersionPartId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (metadata_ == null) {
              Metadata = new global::CalculationService.StoredValue.Types.Metadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 82: {
            BytesValue = input.ReadBytes();
            break;
          }
          case 90: {
            StringValue = input.ReadString();
            break;
          }
          case 98: {
            global::CalculationService.StoredValue.Types.JsonString subBuilder = new global::CalculationService.StoredValue.Types.JsonString();
            if (valueCase_ == ValueOneofCase.JsonValue) {
              subBuilder.MergeFrom(JsonValue);
            }
            input.ReadMessage(subBuilder);
            JsonValue = subBuilder;
            break;
          }
          case 106: {
            global::CalculationService.StoredValue.Types.SparkQuery subBuilder = new global::CalculationService.StoredValue.Types.SparkQuery();
            if (valueCase_ == ValueOneofCase.SparkValue) {
              subBuilder.MergeFrom(SparkValue);
            }
            input.ReadMessage(subBuilder);
            SparkValue = subBuilder;
            break;
          }
          case 114: {
            global::CalculationService.StoredValue.Types.ParquetFile subBuilder = new global::CalculationService.StoredValue.Types.ParquetFile();
            if (valueCase_ == ValueOneofCase.ParquetFile) {
              subBuilder.MergeFrom(ParquetFile);
            }
            input.ReadMessage(subBuilder);
            ParquetFile = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StoredValue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// TODO: Add security settings?
      /// </summary>
      public sealed partial class Metadata : pb::IMessage<Metadata> {
        private static readonly pb::MessageParser<Metadata> _parser = new pb::MessageParser<Metadata>(() => new Metadata());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Metadata> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CalculationService.StoredValue.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Metadata() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Metadata(Metadata other) : this() {
          creator_ = other.creator_;
          createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Metadata Clone() {
          return new Metadata(this);
        }

        /// <summary>Field number for the "creator" field.</summary>
        public const int CreatorFieldNumber = 1;
        private string creator_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Creator {
          get { return creator_; }
          set {
            creator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "createdAt" field.</summary>
        public const int CreatedAtFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
        /// <summary>
        /// TODO Use more distributed friendly time like VectorClock?
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
          get { return createdAt_; }
          set {
            createdAt_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Metadata);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Metadata other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Creator != other.Creator) return false;
          if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Creator.Length != 0) hash ^= Creator.GetHashCode();
          if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Creator.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Creator);
          }
          if (createdAt_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(CreatedAt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Creator.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Creator);
          }
          if (createdAt_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Metadata other) {
          if (other == null) {
            return;
          }
          if (other.Creator.Length != 0) {
            Creator = other.Creator;
          }
          if (other.createdAt_ != null) {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            CreatedAt.MergeFrom(other.CreatedAt);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Creator = input.ReadString();
                break;
              }
              case 18: {
                if (createdAt_ == null) {
                  CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(CreatedAt);
                break;
              }
            }
          }
        }

      }

      public sealed partial class JsonString : pb::IMessage<JsonString> {
        private static readonly pb::MessageParser<JsonString> _parser = new pb::MessageParser<JsonString>(() => new JsonString());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<JsonString> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CalculationService.StoredValue.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JsonString() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JsonString(JsonString other) : this() {
          json_ = other.json_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JsonString Clone() {
          return new JsonString(this);
        }

        /// <summary>Field number for the "json" field.</summary>
        public const int JsonFieldNumber = 1;
        private string json_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Json {
          get { return json_; }
          set {
            json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as JsonString);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(JsonString other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Json != other.Json) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Json.Length != 0) hash ^= Json.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Json.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Json);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Json.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(JsonString other) {
          if (other == null) {
            return;
          }
          if (other.Json.Length != 0) {
            Json = other.Json;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Json = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SparkQuery : pb::IMessage<SparkQuery> {
        private static readonly pb::MessageParser<SparkQuery> _parser = new pb::MessageParser<SparkQuery>(() => new SparkQuery());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SparkQuery> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CalculationService.StoredValue.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SparkQuery() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SparkQuery(SparkQuery other) : this() {
          serverUri_ = other.serverUri_;
          query_ = other.query_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SparkQuery Clone() {
          return new SparkQuery(this);
        }

        /// <summary>Field number for the "serverUri" field.</summary>
        public const int ServerUriFieldNumber = 1;
        private string serverUri_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ServerUri {
          get { return serverUri_; }
          set {
            serverUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "query" field.</summary>
        public const int QueryFieldNumber = 2;
        private string query_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Query {
          get { return query_; }
          set {
            query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SparkQuery);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SparkQuery other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ServerUri != other.ServerUri) return false;
          if (Query != other.Query) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ServerUri.Length != 0) hash ^= ServerUri.GetHashCode();
          if (Query.Length != 0) hash ^= Query.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ServerUri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ServerUri);
          }
          if (Query.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Query);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ServerUri.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerUri);
          }
          if (Query.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SparkQuery other) {
          if (other == null) {
            return;
          }
          if (other.ServerUri.Length != 0) {
            ServerUri = other.ServerUri;
          }
          if (other.Query.Length != 0) {
            Query = other.Query;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ServerUri = input.ReadString();
                break;
              }
              case 18: {
                Query = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ParquetFile : pb::IMessage<ParquetFile> {
        private static readonly pb::MessageParser<ParquetFile> _parser = new pb::MessageParser<ParquetFile>(() => new ParquetFile());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ParquetFile> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CalculationService.StoredValue.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParquetFile() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParquetFile(ParquetFile other) : this() {
          path_ = other.path_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParquetFile Clone() {
          return new ParquetFile(this);
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 1;
        private string path_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path {
          get { return path_; }
          set {
            path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ParquetFile);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ParquetFile other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Path != other.Path) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Path.Length != 0) hash ^= Path.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Path.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Path);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Path.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ParquetFile other) {
          if (other == null) {
            return;
          }
          if (other.Path.Length != 0) {
            Path = other.Path;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Path = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class InternalError : pb::IMessage<InternalError> {
    private static readonly pb::MessageParser<InternalError> _parser = new pb::MessageParser<InternalError>(() => new InternalError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalculationService.MonikerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalError(InternalError other) : this() {
      switch (other.CauseCase) {
        case CauseOneofCase.MissingRequiredArgument:
          MissingRequiredArgument = other.MissingRequiredArgument.Clone();
          break;
        case CauseOneofCase.IdentifierDecodingError:
          IdentifierDecodingError = other.IdentifierDecodingError.Clone();
          break;
        case CauseOneofCase.StorageValueEncodingError:
          StorageValueEncodingError = other.StorageValueEncodingError.Clone();
          break;
        case CauseOneofCase.StorageValueDecodingError:
          StorageValueDecodingError = other.StorageValueDecodingError.Clone();
          break;
        case CauseOneofCase.StorageError:
          StorageError = other.StorageError;
          break;
        case CauseOneofCase.OperationAborted:
          OperationAborted = other.OperationAborted;
          break;
        case CauseOneofCase.ValueError:
          ValueError = other.ValueError;
          break;
        case CauseOneofCase.NotAuthorized:
          NotAuthorized = other.NotAuthorized.Clone();
          break;
        case CauseOneofCase.ServiceNotAvailable:
          ServiceNotAvailable = other.ServiceNotAvailable.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalError Clone() {
      return new InternalError(this);
    }

    /// <summary>Field number for the "missingRequiredArgument" field.</summary>
    public const int MissingRequiredArgumentFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.InternalError.Types.MissingArgument MissingRequiredArgument {
      get { return causeCase_ == CauseOneofCase.MissingRequiredArgument ? (global::CalculationService.InternalError.Types.MissingArgument) cause_ : null; }
      set {
        cause_ = value;
        causeCase_ = value == null ? CauseOneofCase.None : CauseOneofCase.MissingRequiredArgument;
      }
    }

    /// <summary>Field number for the "identifierDecodingError" field.</summary>
    public const int IdentifierDecodingErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.InternalError.Types.IdentifierDecodingError IdentifierDecodingError {
      get { return causeCase_ == CauseOneofCase.IdentifierDecodingError ? (global::CalculationService.InternalError.Types.IdentifierDecodingError) cause_ : null; }
      set {
        cause_ = value;
        causeCase_ = value == null ? CauseOneofCase.None : CauseOneofCase.IdentifierDecodingError;
      }
    }

    /// <summary>Field number for the "storageValueEncodingError" field.</summary>
    public const int StorageValueEncodingErrorFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.InternalError.Types.ValueEncodingError StorageValueEncodingError {
      get { return causeCase_ == CauseOneofCase.StorageValueEncodingError ? (global::CalculationService.InternalError.Types.ValueEncodingError) cause_ : null; }
      set {
        cause_ = value;
        causeCase_ = value == null ? CauseOneofCase.None : CauseOneofCase.StorageValueEncodingError;
      }
    }

    /// <summary>Field number for the "storageValueDecodingError" field.</summary>
    public const int StorageValueDecodingErrorFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CalculationService.InternalError.Types.ValueDecodingError StorageValueDecodingError {
      get { return causeCase_ == CauseOneofCase.StorageValueDecodingError ? (global::CalculationService.InternalError.Types.ValueDecodingError) cause_ : null; }
      set {
        cause_ = value;
        causeCase_ = value == null ? CauseOneofCase.None : CauseOneofCase.StorageValueDecodingError;
      }
    }

    /// <summary>Field number for the "storageError" field.</summary>
    public const int StorageErrorFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StorageError {
      get { return causeCase_ == CauseOneofCase.StorageError ? (string) cause_ : ""; }
      set {
        cause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        causeCase_ = CauseOneofCase.StorageError;
      }
    }

    /// <summary>Field number for the "operationAborted" field.</summary>
    public const int OperationAbortedFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperationAborted {
      get { return causeCase_ == CauseOneofCase.OperationAborted ? (string) cause_ : ""; }
      set {
        cause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        causeCase_ = CauseOneofCase.OperationAborted;
      }
    }

    /// <summary>Field number for the "valueError" field.</summary>
    public const int ValueErrorFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValueError {
      get { return causeCase_ == CauseOneofCase.ValueError ? (string) cause_ : ""; }
      set {
        cause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        causeCase_ = CauseOneofCase.ValueError;
      }
    }

    /// <summary>Field number for the "notAuthorized" field.</summary>
    public const int NotAuthorizedFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Empty NotAuthorized {
      get { return causeCase_ == CauseOneofCase.NotAuthorized ? (global::Google.Protobuf.WellKnownTypes.Empty) cause_ : null; }
      set {
        cause_ = value;
        causeCase_ = value == null ? CauseOneofCase.None : CauseOneofCase.NotAuthorized;
      }
    }

    /// <summary>Field number for the "serviceNotAvailable" field.</summary>
    public const int ServiceNotAvailableFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Empty ServiceNotAvailable {
      get { return causeCase_ == CauseOneofCase.ServiceNotAvailable ? (global::Google.Protobuf.WellKnownTypes.Empty) cause_ : null; }
      set {
        cause_ = value;
        causeCase_ = value == null ? CauseOneofCase.None : CauseOneofCase.ServiceNotAvailable;
      }
    }

    private object cause_;
    /// <summary>Enum of possible cases for the "Cause" oneof.</summary>
    public enum CauseOneofCase {
      None = 0,
      MissingRequiredArgument = 1,
      IdentifierDecodingError = 2,
      StorageValueEncodingError = 3,
      StorageValueDecodingError = 4,
      StorageError = 5,
      OperationAborted = 6,
      ValueError = 7,
      NotAuthorized = 10,
      ServiceNotAvailable = 20,
    }
    private CauseOneofCase causeCase_ = CauseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CauseOneofCase CauseCase {
      get { return causeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCause() {
      causeCase_ = CauseOneofCase.None;
      cause_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MissingRequiredArgument, other.MissingRequiredArgument)) return false;
      if (!object.Equals(IdentifierDecodingError, other.IdentifierDecodingError)) return false;
      if (!object.Equals(StorageValueEncodingError, other.StorageValueEncodingError)) return false;
      if (!object.Equals(StorageValueDecodingError, other.StorageValueDecodingError)) return false;
      if (StorageError != other.StorageError) return false;
      if (OperationAborted != other.OperationAborted) return false;
      if (ValueError != other.ValueError) return false;
      if (!object.Equals(NotAuthorized, other.NotAuthorized)) return false;
      if (!object.Equals(ServiceNotAvailable, other.ServiceNotAvailable)) return false;
      if (CauseCase != other.CauseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (causeCase_ == CauseOneofCase.MissingRequiredArgument) hash ^= MissingRequiredArgument.GetHashCode();
      if (causeCase_ == CauseOneofCase.IdentifierDecodingError) hash ^= IdentifierDecodingError.GetHashCode();
      if (causeCase_ == CauseOneofCase.StorageValueEncodingError) hash ^= StorageValueEncodingError.GetHashCode();
      if (causeCase_ == CauseOneofCase.StorageValueDecodingError) hash ^= StorageValueDecodingError.GetHashCode();
      if (causeCase_ == CauseOneofCase.StorageError) hash ^= StorageError.GetHashCode();
      if (causeCase_ == CauseOneofCase.OperationAborted) hash ^= OperationAborted.GetHashCode();
      if (causeCase_ == CauseOneofCase.ValueError) hash ^= ValueError.GetHashCode();
      if (causeCase_ == CauseOneofCase.NotAuthorized) hash ^= NotAuthorized.GetHashCode();
      if (causeCase_ == CauseOneofCase.ServiceNotAvailable) hash ^= ServiceNotAvailable.GetHashCode();
      hash ^= (int) causeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (causeCase_ == CauseOneofCase.MissingRequiredArgument) {
        output.WriteRawTag(10);
        output.WriteMessage(MissingRequiredArgument);
      }
      if (causeCase_ == CauseOneofCase.IdentifierDecodingError) {
        output.WriteRawTag(18);
        output.WriteMessage(IdentifierDecodingError);
      }
      if (causeCase_ == CauseOneofCase.StorageValueEncodingError) {
        output.WriteRawTag(26);
        output.WriteMessage(StorageValueEncodingError);
      }
      if (causeCase_ == CauseOneofCase.StorageValueDecodingError) {
        output.WriteRawTag(34);
        output.WriteMessage(StorageValueDecodingError);
      }
      if (causeCase_ == CauseOneofCase.StorageError) {
        output.WriteRawTag(42);
        output.WriteString(StorageError);
      }
      if (causeCase_ == CauseOneofCase.OperationAborted) {
        output.WriteRawTag(50);
        output.WriteString(OperationAborted);
      }
      if (causeCase_ == CauseOneofCase.ValueError) {
        output.WriteRawTag(58);
        output.WriteString(ValueError);
      }
      if (causeCase_ == CauseOneofCase.NotAuthorized) {
        output.WriteRawTag(82);
        output.WriteMessage(NotAuthorized);
      }
      if (causeCase_ == CauseOneofCase.ServiceNotAvailable) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ServiceNotAvailable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (causeCase_ == CauseOneofCase.MissingRequiredArgument) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MissingRequiredArgument);
      }
      if (causeCase_ == CauseOneofCase.IdentifierDecodingError) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentifierDecodingError);
      }
      if (causeCase_ == CauseOneofCase.StorageValueEncodingError) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorageValueEncodingError);
      }
      if (causeCase_ == CauseOneofCase.StorageValueDecodingError) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorageValueDecodingError);
      }
      if (causeCase_ == CauseOneofCase.StorageError) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StorageError);
      }
      if (causeCase_ == CauseOneofCase.OperationAborted) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationAborted);
      }
      if (causeCase_ == CauseOneofCase.ValueError) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValueError);
      }
      if (causeCase_ == CauseOneofCase.NotAuthorized) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotAuthorized);
      }
      if (causeCase_ == CauseOneofCase.ServiceNotAvailable) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ServiceNotAvailable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalError other) {
      if (other == null) {
        return;
      }
      switch (other.CauseCase) {
        case CauseOneofCase.MissingRequiredArgument:
          if (MissingRequiredArgument == null) {
            MissingRequiredArgument = new global::CalculationService.InternalError.Types.MissingArgument();
          }
          MissingRequiredArgument.MergeFrom(other.MissingRequiredArgument);
          break;
        case CauseOneofCase.IdentifierDecodingError:
          if (IdentifierDecodingError == null) {
            IdentifierDecodingError = new global::CalculationService.InternalError.Types.IdentifierDecodingError();
          }
          IdentifierDecodingError.MergeFrom(other.IdentifierDecodingError);
          break;
        case CauseOneofCase.StorageValueEncodingError:
          if (StorageValueEncodingError == null) {
            StorageValueEncodingError = new global::CalculationService.InternalError.Types.ValueEncodingError();
          }
          StorageValueEncodingError.MergeFrom(other.StorageValueEncodingError);
          break;
        case CauseOneofCase.StorageValueDecodingError:
          if (StorageValueDecodingError == null) {
            StorageValueDecodingError = new global::CalculationService.InternalError.Types.ValueDecodingError();
          }
          StorageValueDecodingError.MergeFrom(other.StorageValueDecodingError);
          break;
        case CauseOneofCase.StorageError:
          StorageError = other.StorageError;
          break;
        case CauseOneofCase.OperationAborted:
          OperationAborted = other.OperationAborted;
          break;
        case CauseOneofCase.ValueError:
          ValueError = other.ValueError;
          break;
        case CauseOneofCase.NotAuthorized:
          if (NotAuthorized == null) {
            NotAuthorized = new global::Google.Protobuf.WellKnownTypes.Empty();
          }
          NotAuthorized.MergeFrom(other.NotAuthorized);
          break;
        case CauseOneofCase.ServiceNotAvailable:
          if (ServiceNotAvailable == null) {
            ServiceNotAvailable = new global::Google.Protobuf.WellKnownTypes.Empty();
          }
          ServiceNotAvailable.MergeFrom(other.ServiceNotAvailable);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::CalculationService.InternalError.Types.MissingArgument subBuilder = new global::CalculationService.InternalError.Types.MissingArgument();
            if (causeCase_ == CauseOneofCase.MissingRequiredArgument) {
              subBuilder.MergeFrom(MissingRequiredArgument);
            }
            input.ReadMessage(subBuilder);
            MissingRequiredArgument = subBuilder;
            break;
          }
          case 18: {
            global::CalculationService.InternalError.Types.IdentifierDecodingError subBuilder = new global::CalculationService.InternalError.Types.IdentifierDecodingError();
            if (causeCase_ == CauseOneofCase.IdentifierDecodingError) {
              subBuilder.MergeFrom(IdentifierDecodingError);
            }
            input.ReadMessage(subBuilder);
            IdentifierDecodingError = subBuilder;
            break;
          }
          case 26: {
            global::CalculationService.InternalError.Types.ValueEncodingError subBuilder = new global::CalculationService.InternalError.Types.ValueEncodingError();
            if (causeCase_ == CauseOneofCase.StorageValueEncodingError) {
              subBuilder.MergeFrom(StorageValueEncodingError);
            }
            input.ReadMessage(subBuilder);
            StorageValueEncodingError = subBuilder;
            break;
          }
          case 34: {
            global::CalculationService.InternalError.Types.ValueDecodingError subBuilder = new global::CalculationService.InternalError.Types.ValueDecodingError();
            if (causeCase_ == CauseOneofCase.StorageValueDecodingError) {
              subBuilder.MergeFrom(StorageValueDecodingError);
            }
            input.ReadMessage(subBuilder);
            StorageValueDecodingError = subBuilder;
            break;
          }
          case 42: {
            StorageError = input.ReadString();
            break;
          }
          case 50: {
            OperationAborted = input.ReadString();
            break;
          }
          case 58: {
            ValueError = input.ReadString();
            break;
          }
          case 82: {
            global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
            if (causeCase_ == CauseOneofCase.NotAuthorized) {
              subBuilder.MergeFrom(NotAuthorized);
            }
            input.ReadMessage(subBuilder);
            NotAuthorized = subBuilder;
            break;
          }
          case 162: {
            global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
            if (causeCase_ == CauseOneofCase.ServiceNotAvailable) {
              subBuilder.MergeFrom(ServiceNotAvailable);
            }
            input.ReadMessage(subBuilder);
            ServiceNotAvailable = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InternalError message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class MissingArgument : pb::IMessage<MissingArgument> {
        private static readonly pb::MessageParser<MissingArgument> _parser = new pb::MessageParser<MissingArgument>(() => new MissingArgument());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MissingArgument> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CalculationService.InternalError.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MissingArgument() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MissingArgument(MissingArgument other) : this() {
          required_ = other.required_;
          remaining_ = other.remaining_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MissingArgument Clone() {
          return new MissingArgument(this);
        }

        /// <summary>Field number for the "required" field.</summary>
        public const int RequiredFieldNumber = 1;
        private string required_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Required {
          get { return required_; }
          set {
            required_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "remaining" field.</summary>
        public const int RemainingFieldNumber = 2;
        private ulong remaining_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Remaining {
          get { return remaining_; }
          set {
            remaining_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MissingArgument);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MissingArgument other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Required != other.Required) return false;
          if (Remaining != other.Remaining) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Required.Length != 0) hash ^= Required.GetHashCode();
          if (Remaining != 0UL) hash ^= Remaining.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Required.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Required);
          }
          if (Remaining != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Remaining);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Required.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Required);
          }
          if (Remaining != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Remaining);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MissingArgument other) {
          if (other == null) {
            return;
          }
          if (other.Required.Length != 0) {
            Required = other.Required;
          }
          if (other.Remaining != 0UL) {
            Remaining = other.Remaining;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Required = input.ReadString();
                break;
              }
              case 16: {
                Remaining = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class IdentifierDecodingError : pb::IMessage<IdentifierDecodingError> {
        private static readonly pb::MessageParser<IdentifierDecodingError> _parser = new pb::MessageParser<IdentifierDecodingError>(() => new IdentifierDecodingError());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IdentifierDecodingError> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CalculationService.InternalError.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdentifierDecodingError() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdentifierDecodingError(IdentifierDecodingError other) : this() {
          description_ = other.description_;
          stack_ = other.stack_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdentifierDecodingError Clone() {
          return new IdentifierDecodingError(this);
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 1;
        private string description_ = "";
        /// <summary>
        //// A 'best effort' root cause description.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "stack" field.</summary>
        public const int StackFieldNumber = 2;
        private static readonly pb::FieldCodec<global::CalculationService.InternalError.Types.IdentifierDecodingError.Types.StackLine> _repeated_stack_codec
            = pb::FieldCodec.ForMessage(18, global::CalculationService.InternalError.Types.IdentifierDecodingError.Types.StackLine.Parser);
        private readonly pbc::RepeatedField<global::CalculationService.InternalError.Types.IdentifierDecodingError.Types.StackLine> stack_ = new pbc::RepeatedField<global::CalculationService.InternalError.Types.IdentifierDecodingError.Types.StackLine>();
        /// <summary>
        //// A stack of (message, field) name pairs, which identify the specific
        //// message type and field where decoding failed. The stack contains an
        //// entry per level of nesting.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::CalculationService.InternalError.Types.IdentifierDecodingError.Types.StackLine> Stack {
          get { return stack_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as IdentifierDecodingError);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IdentifierDecodingError other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Description != other.Description) return false;
          if(!stack_.Equals(other.stack_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          hash ^= stack_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Description.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Description);
          }
          stack_.WriteTo(output, _repeated_stack_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          size += stack_.CalculateSize(_repeated_stack_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IdentifierDecodingError other) {
          if (other == null) {
            return;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          stack_.Add(other.stack_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Description = input.ReadString();
                break;
              }
              case 18: {
                stack_.AddEntriesFrom(input, _repeated_stack_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the IdentifierDecodingError message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class StackLine : pb::IMessage<StackLine> {
            private static readonly pb::MessageParser<StackLine> _parser = new pb::MessageParser<StackLine>(() => new StackLine());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<StackLine> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::CalculationService.InternalError.Types.IdentifierDecodingError.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StackLine() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StackLine(StackLine other) : this() {
              message_ = other.message_;
              field_ = other.field_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StackLine Clone() {
              return new StackLine(this);
            }

            /// <summary>Field number for the "message" field.</summary>
            public const int MessageFieldNumber = 1;
            private string message_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Message {
              get { return message_; }
              set {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "field" field.</summary>
            public const int FieldFieldNumber = 2;
            private string field_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Field {
              get { return field_; }
              set {
                field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as StackLine);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(StackLine other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Message != other.Message) return false;
              if (Field != other.Field) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Message.Length != 0) hash ^= Message.GetHashCode();
              if (Field.Length != 0) hash ^= Field.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Message.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Message);
              }
              if (Field.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Field);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Message.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
              }
              if (Field.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(StackLine other) {
              if (other == null) {
                return;
              }
              if (other.Message.Length != 0) {
                Message = other.Message;
              }
              if (other.Field.Length != 0) {
                Field = other.Field;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Message = input.ReadString();
                    break;
                  }
                  case 18: {
                    Field = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class ValueEncodingError : pb::IMessage<ValueEncodingError> {
        private static readonly pb::MessageParser<ValueEncodingError> _parser = new pb::MessageParser<ValueEncodingError>(() => new ValueEncodingError());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ValueEncodingError> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CalculationService.InternalError.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueEncodingError() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueEncodingError(ValueEncodingError other) : this() {
          required_ = other.required_;
          remaining_ = other.remaining_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueEncodingError Clone() {
          return new ValueEncodingError(this);
        }

        /// <summary>Field number for the "required" field.</summary>
        public const int RequiredFieldNumber = 1;
        private ulong required_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Required {
          get { return required_; }
          set {
            required_ = value;
          }
        }

        /// <summary>Field number for the "remaining" field.</summary>
        public const int RemainingFieldNumber = 2;
        private ulong remaining_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Remaining {
          get { return remaining_; }
          set {
            remaining_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ValueEncodingError);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ValueEncodingError other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Required != other.Required) return false;
          if (Remaining != other.Remaining) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Required != 0UL) hash ^= Required.GetHashCode();
          if (Remaining != 0UL) hash ^= Remaining.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Required != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Required);
          }
          if (Remaining != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Remaining);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Required != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Required);
          }
          if (Remaining != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Remaining);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ValueEncodingError other) {
          if (other == null) {
            return;
          }
          if (other.Required != 0UL) {
            Required = other.Required;
          }
          if (other.Remaining != 0UL) {
            Remaining = other.Remaining;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Required = input.ReadUInt64();
                break;
              }
              case 16: {
                Remaining = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ValueDecodingError : pb::IMessage<ValueDecodingError> {
        private static readonly pb::MessageParser<ValueDecodingError> _parser = new pb::MessageParser<ValueDecodingError>(() => new ValueDecodingError());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ValueDecodingError> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CalculationService.InternalError.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueDecodingError() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueDecodingError(ValueDecodingError other) : this() {
          description_ = other.description_;
          stack_ = other.stack_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueDecodingError Clone() {
          return new ValueDecodingError(this);
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 1;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "stack" field.</summary>
        public const int StackFieldNumber = 2;
        private static readonly pb::FieldCodec<global::CalculationService.InternalError.Types.ValueDecodingError.Types.StackLine> _repeated_stack_codec
            = pb::FieldCodec.ForMessage(18, global::CalculationService.InternalError.Types.ValueDecodingError.Types.StackLine.Parser);
        private readonly pbc::RepeatedField<global::CalculationService.InternalError.Types.ValueDecodingError.Types.StackLine> stack_ = new pbc::RepeatedField<global::CalculationService.InternalError.Types.ValueDecodingError.Types.StackLine>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::CalculationService.InternalError.Types.ValueDecodingError.Types.StackLine> Stack {
          get { return stack_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ValueDecodingError);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ValueDecodingError other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Description != other.Description) return false;
          if(!stack_.Equals(other.stack_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          hash ^= stack_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Description.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Description);
          }
          stack_.WriteTo(output, _repeated_stack_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          size += stack_.CalculateSize(_repeated_stack_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ValueDecodingError other) {
          if (other == null) {
            return;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          stack_.Add(other.stack_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Description = input.ReadString();
                break;
              }
              case 18: {
                stack_.AddEntriesFrom(input, _repeated_stack_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ValueDecodingError message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class StackLine : pb::IMessage<StackLine> {
            private static readonly pb::MessageParser<StackLine> _parser = new pb::MessageParser<StackLine>(() => new StackLine());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<StackLine> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::CalculationService.InternalError.Types.ValueDecodingError.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StackLine() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StackLine(StackLine other) : this() {
              message_ = other.message_;
              field_ = other.field_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StackLine Clone() {
              return new StackLine(this);
            }

            /// <summary>Field number for the "message" field.</summary>
            public const int MessageFieldNumber = 1;
            private string message_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Message {
              get { return message_; }
              set {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "field" field.</summary>
            public const int FieldFieldNumber = 2;
            private string field_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Field {
              get { return field_; }
              set {
                field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as StackLine);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(StackLine other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Message != other.Message) return false;
              if (Field != other.Field) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Message.Length != 0) hash ^= Message.GetHashCode();
              if (Field.Length != 0) hash ^= Field.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Message.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Message);
              }
              if (Field.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Field);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Message.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
              }
              if (Field.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(StackLine other) {
              if (other == null) {
                return;
              }
              if (other.Message.Length != 0) {
                Message = other.Message;
              }
              if (other.Field.Length != 0) {
                Field = other.Field;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Message = input.ReadString();
                    break;
                  }
                  case 18: {
                    Field = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
